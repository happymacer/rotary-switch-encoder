
rotary_encoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  0000065a  000006ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000065a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800116  00800116  00000704  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000734  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000774  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d30  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000947  00000000  00000000  0000154c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005eb  00000000  00000000  00001e93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00002480  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e3  00000000  00000000  00002608  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000402  00000000  00000000  00002aeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002eed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e5       	ldi	r30, 0x5A	; 90
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 32       	cpi	r26, 0x2C	; 44
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6f 00 	call	0xde	; 0xde <main>
  9e:	0c 94 2b 03 	jmp	0x656	; 0x656 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_Init>:
#include "AtmegaUartLib.h"

//subroutines

void USART_Init(unsigned long BAUD)
{
  a6:	9b 01       	movw	r18, r22
  a8:	ac 01       	movw	r20, r24
	//Set baud rate
	unsigned int ubrr = ((F_CPU/16/BAUD)-1);
  aa:	60 e2       	ldi	r22, 0x20	; 32
  ac:	71 ea       	ldi	r23, 0xA1	; 161
  ae:	87 e0       	ldi	r24, 0x07	; 7
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 aa 02 	call	0x554	; 0x554 <__udivmodsi4>
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	31 09       	sbc	r19, r1
	UBRR0H = (unsigned char)(ubrr>>8);
  ba:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
  be:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	//Enable transmitter only
	UCSR0B = (1<<TXEN0);
  c2:	88 e0       	ldi	r24, 0x08	; 8
  c4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	// Set frame format: 8data, 1 stop bit
	UCSR0C = (3<<UCSZ00);
  c8:	86 e0       	ldi	r24, 0x06	; 6
  ca:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  ce:	08 95       	ret

000000d0 <USART_Transmit>:
}

void USART_Transmit(unsigned char data)
{
	// Wait for empty transmit buffer
	while (!(UCSR0A & (1<<UDRE0))) {};
  d0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  d4:	95 ff       	sbrs	r25, 5
  d6:	fc cf       	rjmp	.-8      	; 0xd0 <USART_Transmit>
	// Put data into buffer, sends the data
	UDR0 = data;
  d8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  dc:	08 95       	ret

000000de <main>:
* main loop								  *
******************************************/


int main(void)
{
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	2a 97       	sbiw	r28, 0x0a	; 10
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	f8 94       	cli
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	cd bf       	out	0x3d, r28	; 61
	//start the rotary decoder
	startmillis();
  f2:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <startmillis>
	set_start_state();
  f6:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <set_start_state>
	//start the USART
	USART_Init(500000);
  fa:	60 e2       	ldi	r22, 0x20	; 32
  fc:	71 ea       	ldi	r23, 0xA1	; 161
  fe:	87 e0       	ldi	r24, 0x07	; 7
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>
	//Set up the LED
	SET_BIT(DDRD,LED); //set bit D0 to output
 106:	8a b1       	in	r24, 0x0a	; 10
 108:	81 60       	ori	r24, 0x01	; 1
 10a:	8a b9       	out	0x0a, r24	; 10
	CLEAR_BIT(PORTD,LED); //turn off the LED	
 10c:	8b b1       	in	r24, 0x0b	; 11
 10e:	8e 7f       	andi	r24, 0xFE	; 254
 110:	8b b9       	out	0x0b, r24	; 11
	oldpos = position;
 112:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <position>
 116:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <oldpos>

	
	char buff[10];
	uint8_t extra = 0;
 11a:	00 e0       	ldi	r16, 0x00	; 0
    while (1) 
    {
		if (is_button_pressed(&button_history[2]))
 11c:	80 e2       	ldi	r24, 0x20	; 32
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	0e 94 a3 02 	call	0x546	; 0x546 <is_button_pressed>
 124:	81 11       	cpse	r24, r1
		{
			extra = 4;
 126:	04 e0       	ldi	r16, 0x04	; 4
		}
		if (position == 4+extra)
 128:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <position>
 12c:	02 2e       	mov	r0, r18
 12e:	00 0c       	add	r0, r0
 130:	33 0b       	sbc	r19, r19
 132:	80 2f       	mov	r24, r16
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	04 96       	adiw	r24, 0x04	; 4
 138:	28 17       	cp	r18, r24
 13a:	39 07       	cpc	r19, r25
 13c:	21 f4       	brne	.+8      	; 0x146 <main+0x68>
		{
			SET_BIT(PORTD,LED);
 13e:	8b b1       	in	r24, 0x0b	; 11
 140:	81 60       	ori	r24, 0x01	; 1
 142:	8b b9       	out	0x0b, r24	; 11
 144:	03 c0       	rjmp	.+6      	; 0x14c <main+0x6e>
		}
		else
		{
			CLEAR_BIT(PORTD,LED);
 146:	8b b1       	in	r24, 0x0b	; 11
 148:	8e 7f       	andi	r24, 0xFE	; 254
 14a:	8b b9       	out	0x0b, r24	; 11
		}
		
		if (position == oldpos) 
 14c:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <position>
 150:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <oldpos>
 154:	98 17       	cp	r25, r24
 156:	59 f1       	breq	.+86     	; 0x1ae <main+0xd0>
		{
	
		}
		else
		{
			itoa(position, buff, 10);
 158:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <position>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 15c:	4a e0       	ldi	r20, 0x0A	; 10
 15e:	be 01       	movw	r22, r28
 160:	6f 5f       	subi	r22, 0xFF	; 255
 162:	7f 4f       	sbci	r23, 0xFF	; 255
 164:	08 2e       	mov	r0, r24
 166:	00 0c       	add	r0, r0
 168:	99 0b       	sbc	r25, r25
 16a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <__itoa_ncheck>
			for (uint8_t i=0; i<strlen(buff); i++)
 16e:	10 e0       	ldi	r17, 0x00	; 0
 170:	0a c0       	rjmp	.+20     	; 0x186 <main+0xa8>
			{
				USART_Transmit(buff[i]);
 172:	e1 e0       	ldi	r30, 0x01	; 1
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	ec 0f       	add	r30, r28
 178:	fd 1f       	adc	r31, r29
 17a:	e1 0f       	add	r30, r17
 17c:	f1 1d       	adc	r31, r1
 17e:	80 81       	ld	r24, Z
 180:	0e 94 68 00 	call	0xd0	; 0xd0 <USART_Transmit>
	
		}
		else
		{
			itoa(position, buff, 10);
			for (uint8_t i=0; i<strlen(buff); i++)
 184:	1f 5f       	subi	r17, 0xFF	; 255
 186:	81 2f       	mov	r24, r17
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	de 01       	movw	r26, r28
 18c:	11 96       	adiw	r26, 0x01	; 1
 18e:	fd 01       	movw	r30, r26
 190:	01 90       	ld	r0, Z+
 192:	00 20       	and	r0, r0
 194:	e9 f7       	brne	.-6      	; 0x190 <main+0xb2>
 196:	31 97       	sbiw	r30, 0x01	; 1
 198:	ea 1b       	sub	r30, r26
 19a:	fb 0b       	sbc	r31, r27
 19c:	8e 17       	cp	r24, r30
 19e:	9f 07       	cpc	r25, r31
 1a0:	40 f3       	brcs	.-48     	; 0x172 <main+0x94>
			{
				USART_Transmit(buff[i]);
			}
			USART_Transmit(13); //CR character
 1a2:	8d e0       	ldi	r24, 0x0D	; 13
 1a4:	0e 94 68 00 	call	0xd0	; 0xd0 <USART_Transmit>
			USART_Transmit(10); //LF character			
 1a8:	8a e0       	ldi	r24, 0x0A	; 10
 1aa:	0e 94 68 00 	call	0xd0	; 0xd0 <USART_Transmit>
		}	
		oldpos = position;
 1ae:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <position>
 1b2:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <oldpos>
		
		
		
	}
 1b6:	b2 cf       	rjmp	.-156    	; 0x11c <main+0x3e>

000001b8 <startmillis>:
	void startmillis()
	{
		// Timer 0 is free running and will count in 500us increments.  The buttons will be scanned at each increment of the timer.
		// "millictr" is also incremented at each 1ms cycle
		//enable global interrupts
		sei();
 1b8:	78 94       	sei
		// The overflow interrupt is TIMER0_OVF_vect
		TIMSK0 |= (1<<OCIE0A);  // set Timer/Counter0 Interrupt Mask Register - enable timer 0 output compare interrupt
 1ba:	ee e6       	ldi	r30, 0x6E	; 110
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	82 60       	ori	r24, 0x02	; 2
 1c2:	80 83       	st	Z, r24
		OCR0A = 0x3D; // at 8MHz clock and 0xFA at 16MHz lock // set Timer/Counter Register - counter start point for 1ms counts
 1c4:	8d e3       	ldi	r24, 0x3D	; 61
 1c6:	87 bd       	out	0x27, r24	; 39
		TCCR0A = 0x02; // set Timer/Counter Control Register A to "CTC mode"
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	84 bd       	out	0x24, r24	; 36
		TCCR0B = 0x03; // set Timer/Counter Control Register B, 64 prescaler
 1cc:	83 e0       	ldi	r24, 0x03	; 3
 1ce:	85 bd       	out	0x25, r24	; 37
 1d0:	08 95       	ret

000001d2 <set_start_state>:

	}

void set_start_state(void)
	{
		position = 0;
 1d2:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <position>
		startCnt = milliCtr;
 1d6:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <__data_end>
 1da:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <__data_end+0x1>
 1de:	50 91 18 01 	lds	r21, 0x0118	; 0x800118 <__data_end+0x2>
 1e2:	40 91 19 01 	lds	r20, 0x0119	; 0x800119 <__data_end+0x3>
 1e6:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <__data_end+0x4>
 1ea:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <__data_end+0x5>
 1ee:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <__data_end+0x6>
 1f2:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <__data_end+0x7>
 1f6:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <startCnt>
 1fa:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <startCnt+0x1>
 1fe:	50 93 25 01 	sts	0x0125, r21	; 0x800125 <startCnt+0x2>
 202:	40 93 26 01 	sts	0x0126, r20	; 0x800126 <startCnt+0x3>
 206:	30 93 27 01 	sts	0x0127, r19	; 0x800127 <startCnt+0x4>
 20a:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <startCnt+0x5>
 20e:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <startCnt+0x6>
 212:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <startCnt+0x7>
		old_state = (((*btn[0].inputPort & (1<<btn[0].terminal))>>btn[0].terminal) |
 216:	e0 e0       	ldi	r30, 0x00	; 0
 218:	f1 e0       	ldi	r31, 0x01	; 1
 21a:	a1 81       	ldd	r26, Z+1	; 0x01
 21c:	b2 81       	ldd	r27, Z+2	; 0x02
 21e:	2c 91       	ld	r18, X
 220:	60 81       	ld	r22, Z
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	ac 01       	movw	r20, r24
 228:	06 2e       	mov	r0, r22
 22a:	02 c0       	rjmp	.+4      	; 0x230 <set_start_state+0x5e>
 22c:	44 0f       	add	r20, r20
 22e:	55 1f       	adc	r21, r21
 230:	0a 94       	dec	r0
 232:	e2 f7       	brpl	.-8      	; 0x22c <set_start_state+0x5a>
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	24 23       	and	r18, r20
 238:	35 23       	and	r19, r21
 23a:	02 c0       	rjmp	.+4      	; 0x240 <set_start_state+0x6e>
 23c:	35 95       	asr	r19
 23e:	27 95       	ror	r18
 240:	6a 95       	dec	r22
 242:	e2 f7       	brpl	.-8      	; 0x23c <set_start_state+0x6a>
					(((*btn[1].inputPort & (1<<btn[1].terminal))>>btn[1].terminal)<<1));
 244:	a0 85       	ldd	r26, Z+8	; 0x08
 246:	b1 85       	ldd	r27, Z+9	; 0x09
 248:	4c 91       	ld	r20, X
 24a:	37 81       	ldd	r19, Z+7	; 0x07
 24c:	03 2e       	mov	r0, r19
 24e:	02 c0       	rjmp	.+4      	; 0x254 <set_start_state+0x82>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	0a 94       	dec	r0
 256:	e2 f7       	brpl	.-8      	; 0x250 <set_start_state+0x7e>
 258:	50 e0       	ldi	r21, 0x00	; 0
 25a:	84 23       	and	r24, r20
 25c:	95 23       	and	r25, r21
 25e:	02 c0       	rjmp	.+4      	; 0x264 <set_start_state+0x92>
 260:	95 95       	asr	r25
 262:	87 95       	ror	r24
 264:	3a 95       	dec	r19
 266:	e2 f7       	brpl	.-8      	; 0x260 <set_start_state+0x8e>
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25

void set_start_state(void)
	{
		position = 0;
		startCnt = milliCtr;
		old_state = (((*btn[0].inputPort & (1<<btn[0].terminal))>>btn[0].terminal) |
 26c:	82 2b       	or	r24, r18
 26e:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <old_state>
					(((*btn[1].inputPort & (1<<btn[1].terminal))>>btn[1].terminal)<<1));
		//for clarity, the 2 rotary encoder output pins are connected to Port D pins 1 & 2 and we want them in position 0 & 1
		//set up the registers
		for (uint8_t i = 0; i<n; i++)
 272:	20 e0       	ldi	r18, 0x00	; 0
 274:	1c c0       	rjmp	.+56     	; 0x2ae <set_start_state+0xdc>
		{
			CLEAR_BIT(*btn[i].ddr, btn[i].terminal);  //clear bits to configure as input for buttons - should be 0 by default anyway but just in case.
 276:	82 2f       	mov	r24, r18
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	fc 01       	movw	r30, r24
 27c:	ee 0f       	add	r30, r30
 27e:	ff 1f       	adc	r31, r31
 280:	ee 0f       	add	r30, r30
 282:	ff 1f       	adc	r31, r31
 284:	ee 0f       	add	r30, r30
 286:	ff 1f       	adc	r31, r31
 288:	e8 1b       	sub	r30, r24
 28a:	f9 0b       	sbc	r31, r25
 28c:	e0 50       	subi	r30, 0x00	; 0
 28e:	ff 4f       	sbci	r31, 0xFF	; 255
 290:	a5 81       	ldd	r26, Z+5	; 0x05
 292:	b6 81       	ldd	r27, Z+6	; 0x06
 294:	3c 91       	ld	r19, X
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	00 80       	ld	r0, Z
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <set_start_state+0xd0>
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	0a 94       	dec	r0
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <set_start_state+0xcc>
 2a6:	80 95       	com	r24
 2a8:	83 23       	and	r24, r19
 2aa:	8c 93       	st	X, r24
		startCnt = milliCtr;
		old_state = (((*btn[0].inputPort & (1<<btn[0].terminal))>>btn[0].terminal) |
					(((*btn[1].inputPort & (1<<btn[1].terminal))>>btn[1].terminal)<<1));
		//for clarity, the 2 rotary encoder output pins are connected to Port D pins 1 & 2 and we want them in position 0 & 1
		//set up the registers
		for (uint8_t i = 0; i<n; i++)
 2ac:	2f 5f       	subi	r18, 0xFF	; 255
 2ae:	23 30       	cpi	r18, 0x03	; 3
 2b0:	10 f3       	brcs	.-60     	; 0x276 <set_start_state+0xa4>
		{
			CLEAR_BIT(*btn[i].ddr, btn[i].terminal);  //clear bits to configure as input for buttons - should be 0 by default anyway but just in case.
			//SET_BIT(*btn[i].outputPort, btn[i].terminal); //set bits to turn on pullup resistor
		}
	}
 2b2:	08 95       	ret

000002b4 <read_button>:
	
	uint8_t read_button(volatile uint8_t *port, uint8_t bit)
	{
		if ((*port & (1<<bit)) == 0) return 1;
 2b4:	fc 01       	movw	r30, r24
 2b6:	80 81       	ld	r24, Z
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <read_button+0xc>
 2bc:	95 95       	asr	r25
 2be:	87 95       	ror	r24
 2c0:	6a 95       	dec	r22
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <read_button+0x8>
 2c4:	80 fd       	sbrc	r24, 0
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <read_button+0x18>
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	08 95       	ret
		else return 0;
 2cc:	80 e0       	ldi	r24, 0x00	; 0
	}
 2ce:	08 95       	ret

000002d0 <update_button>:
	

	void update_button(uint8_t *button_history, volatile uint8_t *button_port, uint8_t button_bit)
	{
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	ec 01       	movw	r28, r24
 2d6:	9b 01       	movw	r18, r22
		*button_history = *button_history << 1;
 2d8:	98 81       	ld	r25, Y
 2da:	99 0f       	add	r25, r25
 2dc:	98 83       	st	Y, r25
		*button_history |= read_button(button_port, button_bit);
 2de:	64 2f       	mov	r22, r20
 2e0:	c9 01       	movw	r24, r18
 2e2:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <read_button>
 2e6:	98 81       	ld	r25, Y
 2e8:	89 2b       	or	r24, r25
 2ea:	88 83       	st	Y, r24
	}
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	08 95       	ret

000002f2 <__vector_14>:

/****************************************
* Timer 0 Interrupt routine				*
****************************************/
ISR(TIMER0_COMPA_vect)
{
 2f2:	1f 92       	push	r1
 2f4:	0f 92       	push	r0
 2f6:	0f b6       	in	r0, 0x3f	; 63
 2f8:	0f 92       	push	r0
 2fa:	11 24       	eor	r1, r1
 2fc:	af 92       	push	r10
 2fe:	bf 92       	push	r11
 300:	cf 92       	push	r12
 302:	df 92       	push	r13
 304:	ef 92       	push	r14
 306:	ff 92       	push	r15
 308:	0f 93       	push	r16
 30a:	1f 93       	push	r17
 30c:	2f 93       	push	r18
 30e:	3f 93       	push	r19
 310:	4f 93       	push	r20
 312:	5f 93       	push	r21
 314:	6f 93       	push	r22
 316:	7f 93       	push	r23
 318:	8f 93       	push	r24
 31a:	9f 93       	push	r25
 31c:	af 93       	push	r26
 31e:	bf 93       	push	r27
 320:	ef 93       	push	r30
 322:	ff 93       	push	r31
	if (milliCtr >= btnSamplePeriod + startCnt)
 324:	a0 90 23 01 	lds	r10, 0x0123	; 0x800123 <startCnt>
 328:	b0 90 24 01 	lds	r11, 0x0124	; 0x800124 <startCnt+0x1>
 32c:	c0 90 25 01 	lds	r12, 0x0125	; 0x800125 <startCnt+0x2>
 330:	d0 90 26 01 	lds	r13, 0x0126	; 0x800126 <startCnt+0x3>
 334:	e0 90 27 01 	lds	r14, 0x0127	; 0x800127 <startCnt+0x4>
 338:	f0 90 28 01 	lds	r15, 0x0128	; 0x800128 <startCnt+0x5>
 33c:	00 91 29 01 	lds	r16, 0x0129	; 0x800129 <startCnt+0x6>
 340:	10 91 2a 01 	lds	r17, 0x012A	; 0x80012a <startCnt+0x7>
 344:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <btnSamplePeriod>
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	40 e0       	ldi	r20, 0x00	; 0
 34c:	50 e0       	ldi	r21, 0x00	; 0
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	70 e0       	ldi	r23, 0x00	; 0
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	0e 94 cc 02 	call	0x598	; 0x598 <__adddi3>
 35a:	a0 90 16 01 	lds	r10, 0x0116	; 0x800116 <__data_end>
 35e:	b0 90 17 01 	lds	r11, 0x0117	; 0x800117 <__data_end+0x1>
 362:	c0 90 18 01 	lds	r12, 0x0118	; 0x800118 <__data_end+0x2>
 366:	d0 90 19 01 	lds	r13, 0x0119	; 0x800119 <__data_end+0x3>
 36a:	e0 90 1a 01 	lds	r14, 0x011A	; 0x80011a <__data_end+0x4>
 36e:	f0 90 1b 01 	lds	r15, 0x011B	; 0x80011b <__data_end+0x5>
 372:	00 91 1c 01 	lds	r16, 0x011C	; 0x80011c <__data_end+0x6>
 376:	10 91 1d 01 	lds	r17, 0x011D	; 0x80011d <__data_end+0x7>
 37a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__cmpdi2>
 37e:	09 f0       	breq	.+2      	; 0x382 <__vector_14+0x90>
 380:	48 f5       	brcc	.+82     	; 0x3d4 <__vector_14+0xe2>
	{
		update_button(&button_history[2], btn[2].inputPort, btn[2].terminal); //only update the switch here
 382:	e0 e0       	ldi	r30, 0x00	; 0
 384:	f1 e0       	ldi	r31, 0x01	; 1
 386:	67 85       	ldd	r22, Z+15	; 0x0f
 388:	70 89       	ldd	r23, Z+16	; 0x10
 38a:	46 85       	ldd	r20, Z+14	; 0x0e
 38c:	80 e2       	ldi	r24, 0x20	; 32
 38e:	91 e0       	ldi	r25, 0x01	; 1
 390:	0e 94 68 01 	call	0x2d0	; 0x2d0 <update_button>
		startCnt = milliCtr;
 394:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <__data_end>
 398:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <__data_end+0x1>
 39c:	50 91 18 01 	lds	r21, 0x0118	; 0x800118 <__data_end+0x2>
 3a0:	40 91 19 01 	lds	r20, 0x0119	; 0x800119 <__data_end+0x3>
 3a4:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <__data_end+0x4>
 3a8:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <__data_end+0x5>
 3ac:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <__data_end+0x6>
 3b0:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <__data_end+0x7>
 3b4:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <startCnt>
 3b8:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <startCnt+0x1>
 3bc:	50 93 25 01 	sts	0x0125, r21	; 0x800125 <startCnt+0x2>
 3c0:	40 93 26 01 	sts	0x0126, r20	; 0x800126 <startCnt+0x3>
 3c4:	30 93 27 01 	sts	0x0127, r19	; 0x800127 <startCnt+0x4>
 3c8:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <startCnt+0x5>
 3cc:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <startCnt+0x6>
 3d0:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <startCnt+0x7>
	}
	// consider what happens when milliCtr overflows...
	// when overflow is due at next interrupt instance then
	// reset starting counter
	if (milliCtr >= UINT64_MAX)  //UINT64_MAX should equal 0xffff ffff ffff ffff
 3d4:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <__data_end>
 3d8:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <__data_end+0x1>
 3dc:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <__data_end+0x2>
 3e0:	50 91 19 01 	lds	r21, 0x0119	; 0x800119 <__data_end+0x3>
 3e4:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <__data_end+0x4>
 3e8:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <__data_end+0x5>
 3ec:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end+0x6>
 3f0:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x7>
 3f4:	af ef       	ldi	r26, 0xFF	; 255
 3f6:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__cmpdi2_s8>
 3fa:	09 f5       	brne	.+66     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
	{
		startCnt = milliCtr;
 3fc:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <__data_end>
 400:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <__data_end+0x1>
 404:	50 91 18 01 	lds	r21, 0x0118	; 0x800118 <__data_end+0x2>
 408:	40 91 19 01 	lds	r20, 0x0119	; 0x800119 <__data_end+0x3>
 40c:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <__data_end+0x4>
 410:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <__data_end+0x5>
 414:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <__data_end+0x6>
 418:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <__data_end+0x7>
 41c:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <startCnt>
 420:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <startCnt+0x1>
 424:	50 93 25 01 	sts	0x0125, r21	; 0x800125 <startCnt+0x2>
 428:	40 93 26 01 	sts	0x0126, r20	; 0x800126 <startCnt+0x3>
 42c:	30 93 27 01 	sts	0x0127, r19	; 0x800127 <startCnt+0x4>
 430:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <startCnt+0x5>
 434:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <startCnt+0x6>
 438:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <startCnt+0x7>
 43c:	23 c0       	rjmp	.+70     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
	}
	else
	{
		milliCtr++;
 43e:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <__data_end>
 442:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <__data_end+0x1>
 446:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <__data_end+0x2>
 44a:	50 91 19 01 	lds	r21, 0x0119	; 0x800119 <__data_end+0x3>
 44e:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <__data_end+0x4>
 452:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <__data_end+0x5>
 456:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end+0x6>
 45a:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x7>
 45e:	a1 e0       	ldi	r26, 0x01	; 1
 460:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__adddi3_s8>
 464:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <__data_end>
 468:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <__data_end+0x1>
 46c:	40 93 18 01 	sts	0x0118, r20	; 0x800118 <__data_end+0x2>
 470:	50 93 19 01 	sts	0x0119, r21	; 0x800119 <__data_end+0x3>
 474:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <__data_end+0x4>
 478:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <__data_end+0x5>
 47c:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end+0x6>
 480:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x7>
	}
	// now sample the encoder
	// the next line is equivalent of new_state = (PIND & 0b00000110)>>1 in general form by using the btn setup, when the switches are on pins 1&2
	uint8_t new_state = (((*btn[0].inputPort & (1<<btn[0].terminal))>>btn[0].terminal) | // this part will always end up in bit position 0 in new_state
 484:	e0 e0       	ldi	r30, 0x00	; 0
 486:	f1 e0       	ldi	r31, 0x01	; 1
 488:	a1 81       	ldd	r26, Z+1	; 0x01
 48a:	b2 81       	ldd	r27, Z+2	; 0x02
 48c:	2c 91       	ld	r18, X
 48e:	60 81       	ld	r22, Z
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	ac 01       	movw	r20, r24
 496:	06 2e       	mov	r0, r22
 498:	02 c0       	rjmp	.+4      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 49a:	44 0f       	add	r20, r20
 49c:	55 1f       	adc	r21, r21
 49e:	0a 94       	dec	r0
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	24 23       	and	r18, r20
 4a6:	35 23       	and	r19, r21
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 4aa:	35 95       	asr	r19
 4ac:	27 95       	ror	r18
 4ae:	6a 95       	dec	r22
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
						(((*btn[1].inputPort & (1<<btn[1].terminal))>>btn[1].terminal)<<1)); //the last <<1 pushes the bit to position 1 in the byte
 4b2:	a0 85       	ldd	r26, Z+8	; 0x08
 4b4:	b1 85       	ldd	r27, Z+9	; 0x09
 4b6:	4c 91       	ld	r20, X
 4b8:	37 81       	ldd	r19, Z+7	; 0x07
 4ba:	03 2e       	mov	r0, r19
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4be:	88 0f       	add	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	0a 94       	dec	r0
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4c6:	50 e0       	ldi	r21, 0x00	; 0
 4c8:	84 23       	and	r24, r20
 4ca:	95 23       	and	r25, r21
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 4ce:	95 95       	asr	r25
 4d0:	87 95       	ror	r24
 4d2:	3a 95       	dec	r19
 4d4:	e2 f7       	brpl	.-8      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 4d6:	88 0f       	add	r24, r24
 4d8:	99 1f       	adc	r25, r25
	{
		milliCtr++;
	}
	// now sample the encoder
	// the next line is equivalent of new_state = (PIND & 0b00000110)>>1 in general form by using the btn setup, when the switches are on pins 1&2
	uint8_t new_state = (((*btn[0].inputPort & (1<<btn[0].terminal))>>btn[0].terminal) | // this part will always end up in bit position 0 in new_state
 4da:	82 2b       	or	r24, r18
						(((*btn[1].inputPort & (1<<btn[1].terminal))>>btn[1].terminal)<<1)); //the last <<1 pushes the bit to position 1 in the byte
	if(new_state == old_state) return;
 4dc:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <old_state>
 4e0:	89 17       	cp	r24, r25
 4e2:	c1 f0       	breq	.+48     	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
	if((new_state>>1) ^ (old_state & 0b00000001)) //xor bit 1 of new state with bit 0 of old state, making sure all other bits in old_state are 0
 4e4:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <old_state>
 4e8:	91 70       	andi	r25, 0x01	; 1
 4ea:	28 2f       	mov	r18, r24
 4ec:	26 95       	lsr	r18
 4ee:	29 17       	cp	r18, r25
 4f0:	41 f0       	breq	.+16     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
	// used 0b00000011 because in new_state and in old_state the data is in position 0 and 1.  Must be 11 at detent as both buttons are high at the detents
	{
		//only increment position at detent position, otherwise position increments by 4 each detent to detent move
		if (new_state == 0b00000011) position++;  
 4f2:	83 30       	cpi	r24, 0x03	; 3
 4f4:	69 f4       	brne	.+26     	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
 4f6:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <position>
 4fa:	9f 5f       	subi	r25, 0xFF	; 255
 4fc:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <position>
 500:	07 c0       	rjmp	.+14     	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
	}
	else
	{
		if (new_state == 0b00000011) position--;
 502:	83 30       	cpi	r24, 0x03	; 3
 504:	29 f4       	brne	.+10     	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
 506:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <position>
 50a:	91 50       	subi	r25, 0x01	; 1
 50c:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <position>
	}
	old_state = new_state;
 510:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <old_state>
}
 514:	ff 91       	pop	r31
 516:	ef 91       	pop	r30
 518:	bf 91       	pop	r27
 51a:	af 91       	pop	r26
 51c:	9f 91       	pop	r25
 51e:	8f 91       	pop	r24
 520:	7f 91       	pop	r23
 522:	6f 91       	pop	r22
 524:	5f 91       	pop	r21
 526:	4f 91       	pop	r20
 528:	3f 91       	pop	r19
 52a:	2f 91       	pop	r18
 52c:	1f 91       	pop	r17
 52e:	0f 91       	pop	r16
 530:	ff 90       	pop	r15
 532:	ef 90       	pop	r14
 534:	df 90       	pop	r13
 536:	cf 90       	pop	r12
 538:	bf 90       	pop	r11
 53a:	af 90       	pop	r10
 53c:	0f 90       	pop	r0
 53e:	0f be       	out	0x3f, r0	; 63
 540:	0f 90       	pop	r0
 542:	1f 90       	pop	r1
 544:	18 95       	reti

00000546 <is_button_pressed>:
	}
	
	//Button state detection routines
	uint8_t is_button_pressed(uint8_t *button_history)
	{
		return (*button_history == 0b00001111);
 546:	fc 01       	movw	r30, r24
 548:	90 81       	ld	r25, Z
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	9f 30       	cpi	r25, 0x0F	; 15
 54e:	09 f0       	breq	.+2      	; 0x552 <is_button_pressed+0xc>
 550:	80 e0       	ldi	r24, 0x00	; 0
	}
 552:	08 95       	ret

00000554 <__udivmodsi4>:
 554:	a1 e2       	ldi	r26, 0x21	; 33
 556:	1a 2e       	mov	r1, r26
 558:	aa 1b       	sub	r26, r26
 55a:	bb 1b       	sub	r27, r27
 55c:	fd 01       	movw	r30, r26
 55e:	0d c0       	rjmp	.+26     	; 0x57a <__udivmodsi4_ep>

00000560 <__udivmodsi4_loop>:
 560:	aa 1f       	adc	r26, r26
 562:	bb 1f       	adc	r27, r27
 564:	ee 1f       	adc	r30, r30
 566:	ff 1f       	adc	r31, r31
 568:	a2 17       	cp	r26, r18
 56a:	b3 07       	cpc	r27, r19
 56c:	e4 07       	cpc	r30, r20
 56e:	f5 07       	cpc	r31, r21
 570:	20 f0       	brcs	.+8      	; 0x57a <__udivmodsi4_ep>
 572:	a2 1b       	sub	r26, r18
 574:	b3 0b       	sbc	r27, r19
 576:	e4 0b       	sbc	r30, r20
 578:	f5 0b       	sbc	r31, r21

0000057a <__udivmodsi4_ep>:
 57a:	66 1f       	adc	r22, r22
 57c:	77 1f       	adc	r23, r23
 57e:	88 1f       	adc	r24, r24
 580:	99 1f       	adc	r25, r25
 582:	1a 94       	dec	r1
 584:	69 f7       	brne	.-38     	; 0x560 <__udivmodsi4_loop>
 586:	60 95       	com	r22
 588:	70 95       	com	r23
 58a:	80 95       	com	r24
 58c:	90 95       	com	r25
 58e:	9b 01       	movw	r18, r22
 590:	ac 01       	movw	r20, r24
 592:	bd 01       	movw	r22, r26
 594:	cf 01       	movw	r24, r30
 596:	08 95       	ret

00000598 <__adddi3>:
 598:	2a 0d       	add	r18, r10
 59a:	3b 1d       	adc	r19, r11
 59c:	4c 1d       	adc	r20, r12
 59e:	5d 1d       	adc	r21, r13
 5a0:	6e 1d       	adc	r22, r14
 5a2:	7f 1d       	adc	r23, r15
 5a4:	80 1f       	adc	r24, r16
 5a6:	91 1f       	adc	r25, r17
 5a8:	08 95       	ret

000005aa <__adddi3_s8>:
 5aa:	00 24       	eor	r0, r0
 5ac:	a7 fd       	sbrc	r26, 7
 5ae:	00 94       	com	r0
 5b0:	2a 0f       	add	r18, r26
 5b2:	30 1d       	adc	r19, r0
 5b4:	40 1d       	adc	r20, r0
 5b6:	50 1d       	adc	r21, r0
 5b8:	60 1d       	adc	r22, r0
 5ba:	70 1d       	adc	r23, r0
 5bc:	80 1d       	adc	r24, r0
 5be:	90 1d       	adc	r25, r0
 5c0:	08 95       	ret

000005c2 <__cmpdi2>:
 5c2:	2a 15       	cp	r18, r10
 5c4:	3b 05       	cpc	r19, r11
 5c6:	4c 05       	cpc	r20, r12
 5c8:	5d 05       	cpc	r21, r13
 5ca:	6e 05       	cpc	r22, r14
 5cc:	7f 05       	cpc	r23, r15
 5ce:	80 07       	cpc	r24, r16
 5d0:	91 07       	cpc	r25, r17
 5d2:	08 95       	ret

000005d4 <__cmpdi2_s8>:
 5d4:	00 24       	eor	r0, r0
 5d6:	a7 fd       	sbrc	r26, 7
 5d8:	00 94       	com	r0
 5da:	2a 17       	cp	r18, r26
 5dc:	30 05       	cpc	r19, r0
 5de:	40 05       	cpc	r20, r0
 5e0:	50 05       	cpc	r21, r0
 5e2:	60 05       	cpc	r22, r0
 5e4:	70 05       	cpc	r23, r0
 5e6:	80 05       	cpc	r24, r0
 5e8:	90 05       	cpc	r25, r0
 5ea:	08 95       	ret

000005ec <__itoa_ncheck>:
 5ec:	bb 27       	eor	r27, r27
 5ee:	4a 30       	cpi	r20, 0x0A	; 10
 5f0:	31 f4       	brne	.+12     	; 0x5fe <__itoa_ncheck+0x12>
 5f2:	99 23       	and	r25, r25
 5f4:	22 f4       	brpl	.+8      	; 0x5fe <__itoa_ncheck+0x12>
 5f6:	bd e2       	ldi	r27, 0x2D	; 45
 5f8:	90 95       	com	r25
 5fa:	81 95       	neg	r24
 5fc:	9f 4f       	sbci	r25, 0xFF	; 255
 5fe:	0c 94 02 03 	jmp	0x604	; 0x604 <__utoa_common>

00000602 <__utoa_ncheck>:
 602:	bb 27       	eor	r27, r27

00000604 <__utoa_common>:
 604:	fb 01       	movw	r30, r22
 606:	55 27       	eor	r21, r21
 608:	aa 27       	eor	r26, r26
 60a:	88 0f       	add	r24, r24
 60c:	99 1f       	adc	r25, r25
 60e:	aa 1f       	adc	r26, r26
 610:	a4 17       	cp	r26, r20
 612:	10 f0       	brcs	.+4      	; 0x618 <__utoa_common+0x14>
 614:	a4 1b       	sub	r26, r20
 616:	83 95       	inc	r24
 618:	50 51       	subi	r21, 0x10	; 16
 61a:	b9 f7       	brne	.-18     	; 0x60a <__utoa_common+0x6>
 61c:	a0 5d       	subi	r26, 0xD0	; 208
 61e:	aa 33       	cpi	r26, 0x3A	; 58
 620:	08 f0       	brcs	.+2      	; 0x624 <__utoa_common+0x20>
 622:	a9 5d       	subi	r26, 0xD9	; 217
 624:	a1 93       	st	Z+, r26
 626:	00 97       	sbiw	r24, 0x00	; 0
 628:	79 f7       	brne	.-34     	; 0x608 <__utoa_common+0x4>
 62a:	b1 11       	cpse	r27, r1
 62c:	b1 93       	st	Z+, r27
 62e:	11 92       	st	Z+, r1
 630:	cb 01       	movw	r24, r22
 632:	0c 94 1b 03 	jmp	0x636	; 0x636 <strrev>

00000636 <strrev>:
 636:	dc 01       	movw	r26, r24
 638:	fc 01       	movw	r30, r24
 63a:	67 2f       	mov	r22, r23
 63c:	71 91       	ld	r23, Z+
 63e:	77 23       	and	r23, r23
 640:	e1 f7       	brne	.-8      	; 0x63a <strrev+0x4>
 642:	32 97       	sbiw	r30, 0x02	; 2
 644:	04 c0       	rjmp	.+8      	; 0x64e <strrev+0x18>
 646:	7c 91       	ld	r23, X
 648:	6d 93       	st	X+, r22
 64a:	70 83       	st	Z, r23
 64c:	62 91       	ld	r22, -Z
 64e:	ae 17       	cp	r26, r30
 650:	bf 07       	cpc	r27, r31
 652:	c8 f3       	brcs	.-14     	; 0x646 <strrev+0x10>
 654:	08 95       	ret

00000656 <_exit>:
 656:	f8 94       	cli

00000658 <__stop_program>:
 658:	ff cf       	rjmp	.-2      	; 0x658 <__stop_program>
